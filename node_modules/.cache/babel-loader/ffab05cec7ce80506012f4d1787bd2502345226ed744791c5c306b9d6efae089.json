{"ast":null,"code":"import _classCallCheck from \"C:/Users/Natu/Documents/GitHub/New folder/Serverless_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Natu/Documents/GitHub/New folder/Serverless_app/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport auth0 from 'auth0-js';\nimport { authConfig } from '../config';\nvar Auth = /*#__PURE__*/function () {\n  function Auth(history) {\n    _classCallCheck(this, Auth);\n    this.auth0 = new auth0.WebAuth({\n      domain: authConfig.domain,\n      clientID: authConfig.clientId,\n      redirectUri: authConfig.callbackUrl,\n      responseType: 'token id_token',\n      scope: 'openid'\n    });\n    this.history = history;\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n  _createClass(Auth, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n      this.auth0.parseHash(function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          console.log('Access token: ', authResult.accessToken);\n          console.log('id token: ', authResult.idToken);\n          _this.setSession(authResult);\n        } else if (err) {\n          _this.history.replace('/');\n          console.log(err);\n          alert(\"Error: \".concat(err.error, \". Check the console for further details.\"));\n        }\n      });\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      return this.accessToken;\n    }\n  }, {\n    key: \"getIdToken\",\n    value: function getIdToken() {\n      return this.idToken;\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // Set isLoggedIn flag in localStorage\n      localStorage.setItem('isLoggedIn', 'true');\n\n      // Set the time that the access token will expire at\n      var expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n      this.accessToken = authResult.accessToken;\n      this.idToken = authResult.idToken;\n      this.expiresAt = expiresAt;\n\n      // navigate to the home route\n      this.history.replace('/');\n    }\n  }, {\n    key: \"renewSession\",\n    value: function renewSession() {\n      var _this2 = this;\n      this.auth0.checkSession({}, function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this2.setSession(authResult);\n        } else if (err) {\n          _this2.logout();\n          console.log(err);\n          alert(\"Could not get a new token (\".concat(err.error, \": \").concat(err.error_description, \").\"));\n        }\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Remove tokens and expiry time\n      this.accessToken = null;\n      this.idToken = null;\n      this.expiresAt = 0;\n\n      // Remove isLoggedIn flag from localStorage\n      localStorage.removeItem('isLoggedIn');\n      this.auth0.logout({\n        return_to: window.location.origin\n      });\n\n      // navigate to the home route\n      this.history.replace('/');\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the\n      // access token's expiry time\n      var expiresAt = this.expiresAt;\n      return new Date().getTime() < expiresAt;\n    }\n  }]);\n  return Auth;\n}();\nexport { Auth as default };","map":{"version":3,"names":["auth0","authConfig","Auth","history","WebAuth","domain","clientID","clientId","redirectUri","callbackUrl","responseType","scope","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","getIdToken","renewSession","authorize","parseHash","err","authResult","accessToken","idToken","console","log","setSession","replace","alert","error","localStorage","setItem","expiresAt","expiresIn","Date","getTime","checkSession","error_description","removeItem","return_to","window","location","origin"],"sources":["C:/Users/Natu/Documents/GitHub/New folder/Serverless_app/client/src/auth/Auth.js"],"sourcesContent":["import auth0 from 'auth0-js';\nimport { authConfig } from '../config';\n\nexport default class Auth {\n  accessToken;\n  idToken;\n  expiresAt;\n\n  auth0 = new auth0.WebAuth({\n    domain: authConfig.domain,\n    clientID: authConfig.clientId,\n    redirectUri: authConfig.callbackUrl,\n    responseType: 'token id_token',\n    scope: 'openid'\n  });\n\n  constructor(history) {\n    this.history = history\n\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        console.log('Access token: ', authResult.accessToken)\n        console.log('id token: ', authResult.idToken)\n        this.setSession(authResult);\n      } else if (err) {\n        this.history.replace('/');\n        console.log(err);\n        alert(`Error: ${err.error}. Check the console for further details.`);\n      }\n    });\n  }\n\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  setSession(authResult) {\n    // Set isLoggedIn flag in localStorage\n    localStorage.setItem('isLoggedIn', 'true');\n\n    // Set the time that the access token will expire at\n    let expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();\n    this.accessToken = authResult.accessToken;\n    this.idToken = authResult.idToken;\n    this.expiresAt = expiresAt;\n\n    // navigate to the home route\n    this.history.replace('/');\n  }\n\n  renewSession() {\n    this.auth0.checkSession({}, (err, authResult) => {\n       if (authResult && authResult.accessToken && authResult.idToken) {\n         this.setSession(authResult);\n       } else if (err) {\n         this.logout();\n         console.log(err);\n         alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\n       }\n    });\n  }\n\n  logout() {\n    // Remove tokens and expiry time\n    this.accessToken = null;\n    this.idToken = null;\n    this.expiresAt = 0;\n\n    // Remove isLoggedIn flag from localStorage\n    localStorage.removeItem('isLoggedIn');\n\n    this.auth0.logout({\n      return_to: window.location.origin\n    });\n\n    // navigate to the home route\n    this.history.replace('/');\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    let expiresAt = this.expiresAt;\n    return new Date().getTime() < expiresAt;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}